generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           String        @id @default(uuid())
  firstName    String?
  username     String        @unique
  email        String        @unique
  imageUrl     String?       @db.Text
  clerkId      String        @unique
  location     String        @default("Unspecified")
  blockedUsers BlockedUser[]
  following    Follow[]      @relation("follower")
  followers    Follow[]      @relation("following")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts        Post[]
  comments     Comment[]
  SavedPosts   SavedPosts[]
  Restrict     Restrict[]
  Notification Notification[]
}

model BlockedUser {
  userId        String
  blockedUserId String

  user User @relation(fields: [userId], references: [clerkId])

  @@id([userId, blockedUserId])
  @@index([userId])
}

model Post {
  id           String   @id @default(uuid())
  userId       String
  imageUrl     String   @db.Text
  caption      String?
  location     String?
  hideLikes    Boolean?
  hideComments Boolean?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  likes        Like[]
  comments     Comment[]
  user         User           @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  SavedPosts   SavedPosts[]
  Notification Notification[]

  @@index([userId])
}

model Like {
  id     String @id @default(uuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
}

model Comment {
  id      String @id @default(uuid())
  content String
  userId  String
  postId  String
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [clerkId], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model Follow {
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  follower    User     @relation("follower", fields: [followerId], references: [clerkId], onDelete: Cascade)
  following   User     @relation("following", fields: [followingId], references: [clerkId], onDelete: Cascade)

  @@id([followerId, followingId])
  @@index([followingId])
  @@index([followerId])
}

model SavedPosts {
  userId      String
  postId      String
  savedUserId String
  user        User   @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  post        Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@id([userId, postId, savedUserId])
  @@index([postId])
  @@index([userId])
}

enum NotificationType {
  COMMENT
  FOLLOW
  LIKE
  FAVORITE
}

model Notification {
  id        String           @id @default(uuid())
  recipient String
  sender    String
  postId    String?
  type      NotificationType

  user User  @relation(fields: [sender], references: [clerkId], onDelete: Cascade)
  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([recipient])
  @@index([sender])
  @@index([postId])
}

model Restrict {
  userId           String
  restrictedUserId String

  user      User      @relation(fields: [userId], references: [clerkId], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  expiry    DateTime?

  @@id([userId, restrictedUserId])
  @@index([userId])
}
